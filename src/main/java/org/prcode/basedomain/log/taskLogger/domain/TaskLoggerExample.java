package org.prcode.basedomain.log.taskLogger.domain;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class TaskLoggerExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table t_task_logger
     *
     * @mbg.generated
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table t_task_logger
     *
     * @mbg.generated
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table t_task_logger
     *
     * @mbg.generated
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_task_logger
     *
     * @mbg.generated
     */
    public TaskLoggerExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_task_logger
     *
     * @mbg.generated
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_task_logger
     *
     * @mbg.generated
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_task_logger
     *
     * @mbg.generated
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_task_logger
     *
     * @mbg.generated
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_task_logger
     *
     * @mbg.generated
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_task_logger
     *
     * @mbg.generated
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_task_logger
     *
     * @mbg.generated
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_task_logger
     *
     * @mbg.generated
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_task_logger
     *
     * @mbg.generated
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_task_logger
     *
     * @mbg.generated
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table t_task_logger
     *
     * @mbg.generated
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andIdIsNull() {
            addCriterion("taskLogger.f_id is null");
            return (Criteria) this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("taskLogger.f_id is not null");
            return (Criteria) this;
        }

        public Criteria andIdEqualTo(Long value) {
            addCriterion("taskLogger.f_id =", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotEqualTo(Long value) {
            addCriterion("taskLogger.f_id <>", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThan(Long value) {
            addCriterion("taskLogger.f_id >", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThanOrEqualTo(Long value) {
            addCriterion("taskLogger.f_id >=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThan(Long value) {
            addCriterion("taskLogger.f_id <", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThanOrEqualTo(Long value) {
            addCriterion("taskLogger.f_id <=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdIn(List<Long> values) {
            addCriterion("taskLogger.f_id in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotIn(List<Long> values) {
            addCriterion("taskLogger.f_id not in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdBetween(Long value1, Long value2) {
            addCriterion("taskLogger.f_id between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotBetween(Long value1, Long value2) {
            addCriterion("taskLogger.f_id not between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andClassNameIsNull() {
            addCriterion("taskLogger.f_class_name is null");
            return (Criteria) this;
        }

        public Criteria andClassNameIsNotNull() {
            addCriterion("taskLogger.f_class_name is not null");
            return (Criteria) this;
        }

        public Criteria andClassNameEqualTo(String value) {
            addCriterion("taskLogger.f_class_name =", value, "className");
            return (Criteria) this;
        }

        public Criteria andClassNameNotEqualTo(String value) {
            addCriterion("taskLogger.f_class_name <>", value, "className");
            return (Criteria) this;
        }

        public Criteria andClassNameGreaterThan(String value) {
            addCriterion("taskLogger.f_class_name >", value, "className");
            return (Criteria) this;
        }

        public Criteria andClassNameGreaterThanOrEqualTo(String value) {
            addCriterion("taskLogger.f_class_name >=", value, "className");
            return (Criteria) this;
        }

        public Criteria andClassNameLessThan(String value) {
            addCriterion("taskLogger.f_class_name <", value, "className");
            return (Criteria) this;
        }

        public Criteria andClassNameLessThanOrEqualTo(String value) {
            addCriterion("taskLogger.f_class_name <=", value, "className");
            return (Criteria) this;
        }

        public Criteria andClassNameLike(String value) {
            addCriterion("taskLogger.f_class_name like", value, "className");
            return (Criteria) this;
        }

        public Criteria andClassNameNotLike(String value) {
            addCriterion("taskLogger.f_class_name not like", value, "className");
            return (Criteria) this;
        }

        public Criteria andClassNameIn(List<String> values) {
            addCriterion("taskLogger.f_class_name in", values, "className");
            return (Criteria) this;
        }

        public Criteria andClassNameNotIn(List<String> values) {
            addCriterion("taskLogger.f_class_name not in", values, "className");
            return (Criteria) this;
        }

        public Criteria andClassNameBetween(String value1, String value2) {
            addCriterion("taskLogger.f_class_name between", value1, value2, "className");
            return (Criteria) this;
        }

        public Criteria andClassNameNotBetween(String value1, String value2) {
            addCriterion("taskLogger.f_class_name not between", value1, value2, "className");
            return (Criteria) this;
        }

        public Criteria andMethodNameIsNull() {
            addCriterion("taskLogger.f_method_name is null");
            return (Criteria) this;
        }

        public Criteria andMethodNameIsNotNull() {
            addCriterion("taskLogger.f_method_name is not null");
            return (Criteria) this;
        }

        public Criteria andMethodNameEqualTo(String value) {
            addCriterion("taskLogger.f_method_name =", value, "methodName");
            return (Criteria) this;
        }

        public Criteria andMethodNameNotEqualTo(String value) {
            addCriterion("taskLogger.f_method_name <>", value, "methodName");
            return (Criteria) this;
        }

        public Criteria andMethodNameGreaterThan(String value) {
            addCriterion("taskLogger.f_method_name >", value, "methodName");
            return (Criteria) this;
        }

        public Criteria andMethodNameGreaterThanOrEqualTo(String value) {
            addCriterion("taskLogger.f_method_name >=", value, "methodName");
            return (Criteria) this;
        }

        public Criteria andMethodNameLessThan(String value) {
            addCriterion("taskLogger.f_method_name <", value, "methodName");
            return (Criteria) this;
        }

        public Criteria andMethodNameLessThanOrEqualTo(String value) {
            addCriterion("taskLogger.f_method_name <=", value, "methodName");
            return (Criteria) this;
        }

        public Criteria andMethodNameLike(String value) {
            addCriterion("taskLogger.f_method_name like", value, "methodName");
            return (Criteria) this;
        }

        public Criteria andMethodNameNotLike(String value) {
            addCriterion("taskLogger.f_method_name not like", value, "methodName");
            return (Criteria) this;
        }

        public Criteria andMethodNameIn(List<String> values) {
            addCriterion("taskLogger.f_method_name in", values, "methodName");
            return (Criteria) this;
        }

        public Criteria andMethodNameNotIn(List<String> values) {
            addCriterion("taskLogger.f_method_name not in", values, "methodName");
            return (Criteria) this;
        }

        public Criteria andMethodNameBetween(String value1, String value2) {
            addCriterion("taskLogger.f_method_name between", value1, value2, "methodName");
            return (Criteria) this;
        }

        public Criteria andMethodNameNotBetween(String value1, String value2) {
            addCriterion("taskLogger.f_method_name not between", value1, value2, "methodName");
            return (Criteria) this;
        }

        public Criteria andIsUndefinedExceptionIsNull() {
            addCriterion("taskLogger.f_is_undefined_exception is null");
            return (Criteria) this;
        }

        public Criteria andIsUndefinedExceptionIsNotNull() {
            addCriterion("taskLogger.f_is_undefined_exception is not null");
            return (Criteria) this;
        }

        public Criteria andIsUndefinedExceptionEqualTo(Byte value) {
            addCriterion("taskLogger.f_is_undefined_exception =", value, "isUndefinedException");
            return (Criteria) this;
        }

        public Criteria andIsUndefinedExceptionNotEqualTo(Byte value) {
            addCriterion("taskLogger.f_is_undefined_exception <>", value, "isUndefinedException");
            return (Criteria) this;
        }

        public Criteria andIsUndefinedExceptionGreaterThan(Byte value) {
            addCriterion("taskLogger.f_is_undefined_exception >", value, "isUndefinedException");
            return (Criteria) this;
        }

        public Criteria andIsUndefinedExceptionGreaterThanOrEqualTo(Byte value) {
            addCriterion("taskLogger.f_is_undefined_exception >=", value, "isUndefinedException");
            return (Criteria) this;
        }

        public Criteria andIsUndefinedExceptionLessThan(Byte value) {
            addCriterion("taskLogger.f_is_undefined_exception <", value, "isUndefinedException");
            return (Criteria) this;
        }

        public Criteria andIsUndefinedExceptionLessThanOrEqualTo(Byte value) {
            addCriterion("taskLogger.f_is_undefined_exception <=", value, "isUndefinedException");
            return (Criteria) this;
        }

        public Criteria andIsUndefinedExceptionIn(List<Byte> values) {
            addCriterion("taskLogger.f_is_undefined_exception in", values, "isUndefinedException");
            return (Criteria) this;
        }

        public Criteria andIsUndefinedExceptionNotIn(List<Byte> values) {
            addCriterion("taskLogger.f_is_undefined_exception not in", values, "isUndefinedException");
            return (Criteria) this;
        }

        public Criteria andIsUndefinedExceptionBetween(Byte value1, Byte value2) {
            addCriterion("taskLogger.f_is_undefined_exception between", value1, value2, "isUndefinedException");
            return (Criteria) this;
        }

        public Criteria andIsUndefinedExceptionNotBetween(Byte value1, Byte value2) {
            addCriterion("taskLogger.f_is_undefined_exception not between", value1, value2, "isUndefinedException");
            return (Criteria) this;
        }

        public Criteria andTaskStartTimeIsNull() {
            addCriterion("taskLogger.f_task_start_time is null");
            return (Criteria) this;
        }

        public Criteria andTaskStartTimeIsNotNull() {
            addCriterion("taskLogger.f_task_start_time is not null");
            return (Criteria) this;
        }

        public Criteria andTaskStartTimeEqualTo(Date value) {
            addCriterion("taskLogger.f_task_start_time =", value, "taskStartTime");
            return (Criteria) this;
        }

        public Criteria andTaskStartTimeNotEqualTo(Date value) {
            addCriterion("taskLogger.f_task_start_time <>", value, "taskStartTime");
            return (Criteria) this;
        }

        public Criteria andTaskStartTimeGreaterThan(Date value) {
            addCriterion("taskLogger.f_task_start_time >", value, "taskStartTime");
            return (Criteria) this;
        }

        public Criteria andTaskStartTimeGreaterThanOrEqualTo(Date value) {
            addCriterion("taskLogger.f_task_start_time >=", value, "taskStartTime");
            return (Criteria) this;
        }

        public Criteria andTaskStartTimeLessThan(Date value) {
            addCriterion("taskLogger.f_task_start_time <", value, "taskStartTime");
            return (Criteria) this;
        }

        public Criteria andTaskStartTimeLessThanOrEqualTo(Date value) {
            addCriterion("taskLogger.f_task_start_time <=", value, "taskStartTime");
            return (Criteria) this;
        }

        public Criteria andTaskStartTimeIn(List<Date> values) {
            addCriterion("taskLogger.f_task_start_time in", values, "taskStartTime");
            return (Criteria) this;
        }

        public Criteria andTaskStartTimeNotIn(List<Date> values) {
            addCriterion("taskLogger.f_task_start_time not in", values, "taskStartTime");
            return (Criteria) this;
        }

        public Criteria andTaskStartTimeBetween(Date value1, Date value2) {
            addCriterion("taskLogger.f_task_start_time between", value1, value2, "taskStartTime");
            return (Criteria) this;
        }

        public Criteria andTaskStartTimeNotBetween(Date value1, Date value2) {
            addCriterion("taskLogger.f_task_start_time not between", value1, value2, "taskStartTime");
            return (Criteria) this;
        }

        public Criteria andTaskEndTimeIsNull() {
            addCriterion("taskLogger.f_task_end_time is null");
            return (Criteria) this;
        }

        public Criteria andTaskEndTimeIsNotNull() {
            addCriterion("taskLogger.f_task_end_time is not null");
            return (Criteria) this;
        }

        public Criteria andTaskEndTimeEqualTo(Date value) {
            addCriterion("taskLogger.f_task_end_time =", value, "taskEndTime");
            return (Criteria) this;
        }

        public Criteria andTaskEndTimeNotEqualTo(Date value) {
            addCriterion("taskLogger.f_task_end_time <>", value, "taskEndTime");
            return (Criteria) this;
        }

        public Criteria andTaskEndTimeGreaterThan(Date value) {
            addCriterion("taskLogger.f_task_end_time >", value, "taskEndTime");
            return (Criteria) this;
        }

        public Criteria andTaskEndTimeGreaterThanOrEqualTo(Date value) {
            addCriterion("taskLogger.f_task_end_time >=", value, "taskEndTime");
            return (Criteria) this;
        }

        public Criteria andTaskEndTimeLessThan(Date value) {
            addCriterion("taskLogger.f_task_end_time <", value, "taskEndTime");
            return (Criteria) this;
        }

        public Criteria andTaskEndTimeLessThanOrEqualTo(Date value) {
            addCriterion("taskLogger.f_task_end_time <=", value, "taskEndTime");
            return (Criteria) this;
        }

        public Criteria andTaskEndTimeIn(List<Date> values) {
            addCriterion("taskLogger.f_task_end_time in", values, "taskEndTime");
            return (Criteria) this;
        }

        public Criteria andTaskEndTimeNotIn(List<Date> values) {
            addCriterion("taskLogger.f_task_end_time not in", values, "taskEndTime");
            return (Criteria) this;
        }

        public Criteria andTaskEndTimeBetween(Date value1, Date value2) {
            addCriterion("taskLogger.f_task_end_time between", value1, value2, "taskEndTime");
            return (Criteria) this;
        }

        public Criteria andTaskEndTimeNotBetween(Date value1, Date value2) {
            addCriterion("taskLogger.f_task_end_time not between", value1, value2, "taskEndTime");
            return (Criteria) this;
        }

        public Criteria andDealTimeIsNull() {
            addCriterion("taskLogger.f_deal_time is null");
            return (Criteria) this;
        }

        public Criteria andDealTimeIsNotNull() {
            addCriterion("taskLogger.f_deal_time is not null");
            return (Criteria) this;
        }

        public Criteria andDealTimeEqualTo(Integer value) {
            addCriterion("taskLogger.f_deal_time =", value, "dealTime");
            return (Criteria) this;
        }

        public Criteria andDealTimeNotEqualTo(Integer value) {
            addCriterion("taskLogger.f_deal_time <>", value, "dealTime");
            return (Criteria) this;
        }

        public Criteria andDealTimeGreaterThan(Integer value) {
            addCriterion("taskLogger.f_deal_time >", value, "dealTime");
            return (Criteria) this;
        }

        public Criteria andDealTimeGreaterThanOrEqualTo(Integer value) {
            addCriterion("taskLogger.f_deal_time >=", value, "dealTime");
            return (Criteria) this;
        }

        public Criteria andDealTimeLessThan(Integer value) {
            addCriterion("taskLogger.f_deal_time <", value, "dealTime");
            return (Criteria) this;
        }

        public Criteria andDealTimeLessThanOrEqualTo(Integer value) {
            addCriterion("taskLogger.f_deal_time <=", value, "dealTime");
            return (Criteria) this;
        }

        public Criteria andDealTimeIn(List<Integer> values) {
            addCriterion("taskLogger.f_deal_time in", values, "dealTime");
            return (Criteria) this;
        }

        public Criteria andDealTimeNotIn(List<Integer> values) {
            addCriterion("taskLogger.f_deal_time not in", values, "dealTime");
            return (Criteria) this;
        }

        public Criteria andDealTimeBetween(Integer value1, Integer value2) {
            addCriterion("taskLogger.f_deal_time between", value1, value2, "dealTime");
            return (Criteria) this;
        }

        public Criteria andDealTimeNotBetween(Integer value1, Integer value2) {
            addCriterion("taskLogger.f_deal_time not between", value1, value2, "dealTime");
            return (Criteria) this;
        }

        public Criteria andSys0AddTimeIsNull() {
            addCriterion("taskLogger.f_sys0_add_time is null");
            return (Criteria) this;
        }

        public Criteria andSys0AddTimeIsNotNull() {
            addCriterion("taskLogger.f_sys0_add_time is not null");
            return (Criteria) this;
        }

        public Criteria andSys0AddTimeEqualTo(Date value) {
            addCriterion("taskLogger.f_sys0_add_time =", value, "sys0AddTime");
            return (Criteria) this;
        }

        public Criteria andSys0AddTimeNotEqualTo(Date value) {
            addCriterion("taskLogger.f_sys0_add_time <>", value, "sys0AddTime");
            return (Criteria) this;
        }

        public Criteria andSys0AddTimeGreaterThan(Date value) {
            addCriterion("taskLogger.f_sys0_add_time >", value, "sys0AddTime");
            return (Criteria) this;
        }

        public Criteria andSys0AddTimeGreaterThanOrEqualTo(Date value) {
            addCriterion("taskLogger.f_sys0_add_time >=", value, "sys0AddTime");
            return (Criteria) this;
        }

        public Criteria andSys0AddTimeLessThan(Date value) {
            addCriterion("taskLogger.f_sys0_add_time <", value, "sys0AddTime");
            return (Criteria) this;
        }

        public Criteria andSys0AddTimeLessThanOrEqualTo(Date value) {
            addCriterion("taskLogger.f_sys0_add_time <=", value, "sys0AddTime");
            return (Criteria) this;
        }

        public Criteria andSys0AddTimeIn(List<Date> values) {
            addCriterion("taskLogger.f_sys0_add_time in", values, "sys0AddTime");
            return (Criteria) this;
        }

        public Criteria andSys0AddTimeNotIn(List<Date> values) {
            addCriterion("taskLogger.f_sys0_add_time not in", values, "sys0AddTime");
            return (Criteria) this;
        }

        public Criteria andSys0AddTimeBetween(Date value1, Date value2) {
            addCriterion("taskLogger.f_sys0_add_time between", value1, value2, "sys0AddTime");
            return (Criteria) this;
        }

        public Criteria andSys0AddTimeNotBetween(Date value1, Date value2) {
            addCriterion("taskLogger.f_sys0_add_time not between", value1, value2, "sys0AddTime");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table t_task_logger
     *
     * @mbg.generated do_not_delete_during_merge
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table t_task_logger
     *
     * @mbg.generated
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}